FIXSMPLG TITLE 'ONE SHOT PROGRAM TO FIX SMPLOG.'
***********************************************************************
*                                                                     *
*    FIXSMPLG - PROGRAM TO FIX A HOPEFULLY UNCOMMON PROBLEM           *
*        PLAGUEING OUR SMPLOG DATASET.  THE DATASET IS SUPPOSED       *
*        TO BE VB, 3200, 260.  BUT SOME OF IT, IN THE MIDDLE, IS      *
*        UNBLOCKED.  THIS PROGRAM WILL TAKE AS INPUT, ON DDNAME       *
*        IN, THE BAD DATASET, DETERMINE WHICH RECORDS ARE BLOCKED     *
*        AND WHICH ARE NOT, AND COPY THE WHOLE THING TO DDNAME        *
*        OUT.                                                         *
*                                                                     *
***********************************************************************
         SPACE 1
FIXSMPLG CSECT
         YREGS
         USING FIXSMPLG,R15        (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C'FIXSMPLG - &SYSDATE - &SYSTIME '
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING FIXSMPLG,R12        (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
         OPEN  (OUT,OUTPUT,IN)
         GETMAIN RU,LV=32760       GET INPUT BUFFER.
         LR    R8,R1               COPY BUFFER POINTER.
INLUP    READ  RDECB,SF,IN,(R8)    READ BLOCK OF INPUT DATA.
         CHECK RDECB               (WAIT FOR READ TO COMPLETE)
         LH    R3,0(,R8)           LOAD LENGTH OF BLOCK.
         CH    R3,=H'4'            IS LENGTH GREATER THAN 4?
         BNH   INLUP               B IF NOT.  DISCARD NULL BLOCK.
         LR    R4,R8               GENERATE PAST-END- ...
         AR    R4,R3               ... OF-BLOCK ADDRESS.
         LA    R5,4(,R8)           POINT TO FIRST LOGICAL RECORD.
OUTLUP   CR    R5,R4               PAST END OF BLOCK?
         BNL   INLUP               GET ANOTHER BLOCK IF YES.
         TM    0(R5),X'80'         IS THE RDW REALLY A DATE?
         BO    OUTLUPB             B IF YES.  NO LOGICAL RECS. IN  BLK.
         PUT   OUT,(R5)            OUTPUT NORMAL LOGICAL RECORD.
         AH    R5,0(,R5)           POINT TO NEXT LOGICAL RECORD.
         B     OUTLUP              OUTPUT NEXT LOGICAL RECORD.
OUTLUPB  PUT   OUT,(R8)            OUTPUT UN-BLOCK AS LOGICAL RECORD.
         VTPUT 'UN-BLOCK FOUND.'
         B     INLUP               GET ANOTHER BLOCK.
EOD      EQU   *
POSTGET  SVC   3
         TITLE 'DATA AREAS.'
SAVE     DS    9D
IN       DCB   DDNAME=IN,BLKSIZE=32760,RECFM=V,DSORG=PS,EODAD=EOD,     +
               MACRF=R
OUT      DCB   DDNAME=OUT,LRECL=260,RECFM=VB,DSORG=PS,                 +
               MACRF=PM
         END
