TELL     TITLE 'TELL - TELECONFERENCING TSO COMMAND.'
*%A PPLINK AC(1)
***********************************************************************
*                                                                     *
*  COPYRIGHT (C) 1978 BY BROIDO COMPUTER CONSULTING.  ALL RIGHTS      *
*  RESERVED EXCEPT:                                                   *
*                                                                     *
*  PARTICULAR LICENSE IS GRANTED TO DISTRIBUTE THIS PROGRAM FREE      *
*  OF CHARGE, BUT IT MUST NOT BE SOLD.  A SERVICE CHARGE FOR          *
*  HANDLING A COLLECTION OF SOFTWARE OF WHICH THIS IS A PART,         *
*  ON THE OTHER HAND, IS APPROPRIATE.                                 *
*                                                                     *
*                                  BROIDO COMPUTER CONSULTING         *
*                                  broidoj@gmail.com                  *
*                                                                     *
*  Change Log:                                                        *
*                                                                     *
*  2016/12/14 - Sam Golob                                             *
*                                                                     *
*    - For z/OS 2.2 -                                                 *
*    Needed AMODE 31 in general, and in particular, to access the     *
*    CSCB, which is above the line.  The CSCB is more accurate, to    *
*    determine that the address space is indeed a TSO user.           *
*                                                                     *
*                                                                     *
***********************************************************************
* ------                     MACRO FOR HEX DISPLAYS
*                             (USED FOR DIAGNOSIS)
         MACRO
&NAME    HEX   &TO,&LEN,&FROM
&NAME    DS    0H
         ST    R5,SAV4HEX
         STM   R15,R1,HEXSAVE
         LA    R1,&FROM
         LA    R0,&LEN
         LA    R15,&TO
         BAL   R5,HEX
         L     R5,SAV4HEX
         LM    R15,R1,HEXSAVE
         MEND
* ------                     ----------------------
         YREGS
TELL     CSECT
TELL     AMODE 31
TELL     RMODE 24
         USING TELL,R15            (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C' TELL - for z/OS - &SYSDATE - &SYSTIME - '
         DC    C'COPYRIGHT (C) BROIDO COMPUTER CONSULTING '
         DC    C'1978 - '
         DC    C'ALL RIGHTS RESERVED'
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING TELL,R12            (TELL ASSEMBLER).
         ST    R12,BSAVE           SAVE BASE
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R14,4(,R13)         CHAIN ...
         ST    R13,8(,R14)         ... SAVE AREAS.
         SPACE 2
         L     R2,16                   POINT TO CVT.
         L     R2,0(,R2)               POINT TO TCB WORDS.
         L     R2,0(,R2)               POINT TO TCB.
         L     R2,12(,R2)              POINT TO TIOT.
         MVC   HIID,0(R2)              MOVE USERID.
         MVC   ENDID,0(R2)              "     "
         L     R2,0(,R1)           POINT TO COMMAND BUFFER
         LH    R3,0(,R2)           LOAD LENGTH.
         LH    R4,2(,R2)           LOAD OFFSET.
         LA    R4,4(,R4)           ABSOLUTIZE OFFSET.
         ICM   R4,8,=X'00'         REMEMBER AMODE 31
         SR    R3,R4               GENERATE LENGTH.
         CH    R3,=H'7'            GREATER THAN 7?
         BH    USER1               B IF Y.
         LTR   R3,R3               ZERO LENGTH?
         BZ    USER1               B IF Y.
         AR    R2,R4               POINT TO PARM.
         CLI   0(R2),C' '          BLANK USERID?
         BE    USER1               B IF YES.
         BCTR  R3,*-*              SS-IFY LENGTH.
         EX    R3,USERMOVE         MOVE USERID ...
         OC    USERID,=CL8' '      ... UPPERCASE ...
         MVC   ENDID1,USERID       ...   ...
         B     USER2               ... AND CONTINUE.
USERMOVE MVC   USERID(*-*),0(R2)   EXECUTED USERID MOVE.
         SPACE 1
USER0    VTPUT 'User logged off or not accepting messages.'
USER1    VTPUT 'Enter USERID, or /* to exit.'
         TGET  BUFF,80
         LTR   R1,R1               NO USERID?
         BZ    USER1               B IF NONE.
         LA    R2,BUFF             POINT R2 TO BUFFER.
ULUP     CLI   0(R2),C' '          LEADING BLANK?
         BNE   MVU                 B IF NOT.
         LA    R2,1(,R2)           BUMP BUFFER POINTER.
         BCT   R1,ULUP             LOOP.
         B     USER1               B IF USER ENTERED ALL BLANKS.
MVU      CH    R1,=H'7'            USERID TOO LARGE?
         BNH   MVU1                B IF NOT.
         VTPUT 'USERID too long.'
         B     USER1
MVU1     DS    0H
         BCTR  R1,*-*              REDUCE LENGTH BY 1 FOR SS LEN.
         MVC   USERID,=CL8' '      CLEAR USERID.
         EX    R1,USERMOVE         MOVE USERID.
         OC    USERID,=CL8' '
         MVC   ENDID1,USERID       MOVE IT HERE, TOO.
         CLC   USERID(2),=C'/*'    END?
         BE    EOD1                B IF YES.
USER2    OI    FLAG,FIRST          SET FIRST TIME FLAG.
         L     R2,X'10'            POINT TO CVT.
         L     R2,X'22C'(,R2)      POINT TO ASVT.
         LA    R7,X'210'(,R2)      POINT TO FIRST ASCB ENTRY.
         L     R6,X'204'(,R2)      NUMBER OF ASVT ENTRIES
         LR    R2,R7               LOAD STARTING POINT BACK TO R2
         BCTR  R6,0                ONE LESS. DON'T RUN OVER END.
*                                  FIRST ONE IS *MASTER* ANYWAY...
MLUP     DS    0H                  NOT TSO, SO...
         LA    R2,4(,R2)           BUMP TO NEXT ASCB POINTER.
         L     R3,0(,R2)           POINT TO ...
         LA    R3,0(,R3)           ... ASCB.
         C     R3,=X'80000000'     END OF ASVT'S ASCB POINTERS?
         BE    NOTYRID             YES. MESSAGE AND ASK USER AGAIN.
         TM    0(R2),X'80'         THIS ASCB IN USE? (BIT OFF)
         BZ    CKCSCB              YES. CHECK ITS PROPERTIES.
         BCT   R6,MLUP             NO. TRY THE NEXT ONE.
*
NOTYRID  DS    0H                  NOT YOUR ID. WHADDYA DO?
         MVC   NOTLID(7),USERID    MOVE DEST. USERID
         TPUT  NOTLMSG,LNOTLMSG    TELL USER USER NOT LOGGED ON.
         B     USER1               GET ANOTHER ID.
* ------------------------------------------------------------------ *
*   THE CSCB IS A CHAIN OF ENTRIES, EACH RELATING TO AN ACTIVE       *
*   ADDRESS SPACE.  BUT YOU DON'T HAVE TO RUN THE CHAIN, BECAUSE     *
*   IF THE ASCB IS ACTIVE, THEN +X'38' OFF IT POINTS TO THE CORRECT  *
*   CSCB ENTRY THAT RELATES TO THIS PARTICULAR ADDRESS SPACE.        *
*   FOR AN INACTIVE ADDRESS SPACE, X'38' OFF THE ASCB POINTS TO A    *
*   FULLWORD OF ZEROS.  SO WE CHECK FOR BOTH CONDITIONS.             *
* ------------------------------------------------------------------ *
CKCSCB   DS    0H
         L     R4,X'38'(,R3)       POINT TO CSCB ENTRY FROM THIS ASCB.
         LTR   R4,R4               IS THERE A CSCB ENTRY CONNECTED?
         BNZ   TESTNX1             YES. CHECK IT OUT.
         BCT   R6,MLUP             NO. CAN'T EVER BE TSO. SO SKIP.
         B     NOTYRID             END OF ASVT? ASK FOR USER AGAIN.
*
TESTNX1  DS    0H                  THERE IS A CSCB ENTRY. EXAMINE IT.
         CLI   X'1C'(R4),X'01'     GOOD CSCB. THEN IS THIS A TSO USER?
         BE    TESTNX2             YES FOR SURE. PROCESS THE USERID.
         BCT   R6,MLUP             NO. ANOTHER TYPE OF JOB OR STC...
         B     NOTYRID             END OF ASVT? ASK FOR USER AGAIN.
*
TESTNX2  DS    0H                  DEFINITELY TSO. BUT IS IT OURS?
         CLC   USERID(7),8(R4)     IS THIS THE USERID WE WANT?
         BE    TESTNX3             YES. THEN GO SEND MESSAGES TO IT.
         BCT   R6,MLUP             NO. NOT THE TSO ID WE ASKED FOR.
         B     NOTYRID             END OF ASVT? ASK FOR USER AGAIN.
*
TESTNX3  DS    0H                  WE HAVE ID. START MESSAGE ENTRY.
         VTPUT 'Enter messages.  /* to end'
* ------------------------------------------------------------------ *
*       UNTIL HERE IS ROUTINE TO GET THE DESTINATION USERID.         *
*       FROM HERE ON, IS THE ACTUAL MESSAGE SENDING PROCESS.         *
* ------------------------------------------------------------------ *
LOOP     TM    FLAG,HMOD+UNLOCK    ARE WE IN HALF DUPLEX MODE?
         BNM   LOOP0               B IF NOT (OR UNLOCKED).
         XC    XECB,XECB           CLEAR STAX ECB.
         WAIT  ECB=XECB            WAIT.
         VTPUT '.Enter messages.'
LOOP0    TGET  BUFF,80             GET INPUT.
         TM    FLAG,KILLSTAX       KILL STAX EXIT?
         BZ    LOOP1               B IF NOT
         NI    FLAG,X'FF'-KILLSTAX-STAXON   OFF STAX FLAGS.
         STAX  ,                   CANCEL STAX
LOOP1    LTR   R2,R1               SAVE AND TEST LENGTH.
         BZ    LOOP                B IF NULL INPUT.
         TM    FLAG,FIRST          FIRST MESSAGE TO THIS USER?
         CH    R2,=H'2'            LEN = 2?
         BL    LOOP7               B IF LOW.
         BH    LOOP2               B IF HIGH
         MVC   TESTGA,BUFF         MOVE CHARACTERS.
         B     LOOP6               CONTINUE.
LOOP2    LA    R1,BUFF-3(R2)       POINT TO LAST CHAR OF BUFFER -3
         CLI   0(R1),C' '          PRECEDED BY BLANK?
         BNE   LOOP7
         MVC   TESTGA,1(R1)        MOVE CHARACTERS.
LOOP6    OC    TESTGA,=C'  '       UPPERCASE.
         CLC   TESTGA,=C'GA'       IS IT GO AHEAD?
         BNE   LOOP7               B IF NOT.
         TM    FLAG,HMOD           IN HALF DUPLEX?
         BZ    LOOP8               B IF NOT.
         NI    FLAG,X'FF'-UNLOCK   OFF UNLOCK KEYBOARD FLAG.
         VTPUT '.Waiting for response.'
         B     LOOP8
LOOP7    CH    R2,=H'77'           LENGTH GREATER THAN 77?
         BNL   LOOP8
         LA    R2,2(,R2)           BUMP LENGTH.
         LA    R1,BUFF-1(R2)       POINT TO LAST CHAR.
         MVI   0(R1),C'-'          MOVE A DASH.
LOOP8    CLC   BUFF(2),=C'/*'      END?
         BE    EOD .               B IF YES.
         CLI   BUFF,C'.'           COMMAND?
         BNE   PUT                 B IF NOT.
         OI    BUFF+1,C' '         UPPERCASE.
         CLI   BUFF+1,C'H'         HALF DUPLEX MODE?
         BNE   CKFULL              B IF NOT.
         OI    FLAG,HMOD           ON HALF DUPLEX FLAG.
         NI    FLAG,X'FF'-UNLOCK   OFF UNLOCK FLAG.
         VTPUT '.Half duplex mode set; waiting for response.'
         TM    FLAG,STAXON         STAX SET?
         BO    LOOP                B IF YES.
         OI    FLAG,STAXON         ON STAX FLAG.
         LA    R1,STAXLIST         SET ...
         STAX  STAXEXIT,MF=(E,(1)) ... STAX EXIT.
         B     LOOP
CKFULL   CLI   BUFF+1,C'F'         FULL DUPLEX MODE?
         BNE   CERR                B IF NOT.
         VTPUT '.Full duplex mode restored.'
         NI    FLAG,X'FF'-HMOD-UNLOCK OFF HALF DUPLEX FLAG.
         TM    FLAG,STAXON         STAX ON?
         BZ    LOOP                B IF NOT.
         STAX  ,                   OFF STAX EXIT.
         B     LOOP
CERR     VTPUT '.Invalid command.  Valid commands are .H and .F'
         B     LOOP
PUT      TM    FLAG,FIRST          FIRST TIME FOR THIS USER?
         BZ    PUT0                B IF NOT.
         NI    FLAG,X'FF'-FIRST    OFF FIRST FLAG.
*        MODESET KEY=ZERO,MODE=SUP
         TPUT  HIMSG,LEHIMSG,,NOWAIT,NOHOLD,BREAKIN,HIGHP,             +
               USERIDL=USERID
*        LR    R6,R15
*        MODESET KEY=NZERO,MODE=PROB
*        LTR   R6,R6
         LTR   R15,R15
         BNZ   USER0
*UT0     MODESET KEY=ZERO,MODE=SUP
PUT0     TPUT  BUFF,(2),,NOWAIT,NOHOLD,BREAKIN,HIGHP,                  +
               USERIDL=USERID
*        LR    R6,R15
*        MODESET KEY=NZERO,MODE=PROB
*        LTR   R6,R6
         LTR   R15,R15
         BZ    LOOP
         B     USER0
EOD      TM    FLAG,FIRST          FIRST TIME FLAG STILL SET?
         BZ    EOD0                B IF NOT.
         TPUT  EMSG1,LEMSG1        SEND WARNING END MESSAGES.
         B     EOD1
EOD0     TPUT  EMSG,LEEMSG,,,,BREAKIN,USERIDL=USERID
EOD1     VTPUT 'BYE.'
         L     R13,SAVE+4
         LM    R14,R12,12(R13)
         SR    R15,R15
         BR    R14
         SPACE 1
         USING STAXEXIT,R15
STAXEXIT L     R12,BSAVE           RELOAD BASE
         LR    R5,R14              SAVE RETURN ADDR.
         DROP  R15
STAX1    TM    XECB,X'40'          ECB POSTED?
         BZ    STAX2               B IF NO. GO POST.
         VTPUT '.Full duplex mode restored.'
         NI    FLAG,X'FF'-HMOD-UNLOCK  SET FULL DUPLEX.
         OI    FLAG,KILLSTAX
         BR    R5                  RETURN
STAX2    POST  XECB                POST IT.
         OI    FLAG,UNLOCK         TURN ON UNLOCK FLAG.
         BR    R5                  RETURN.
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
HEX      DS    0H                    HEX DISPLAY ROUTINE - KEEP IN
         MVC   1(1,R15),0(R1)        Move byte
         UNPK  0(3,R15),1(2,R15)     Unpack
         TR    0(2,R15),HEXTAB-240
         LA    R15,2(,R15)           Increment output pointer
         LA    R1,1(,R1)             Increment input pointer
         BCT   R0,HEX                Decrement length, then loop
         MVI   0(R15),C' '           Blank the trailing byte
         BR    R5                    RETURN TO CALLER
HEXTAB   DC    C'0123456789ABCDEF'   Translate table
         SPACE
* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *
         SPACE 1
SAVE     DS    9D
SAVE1401 DS    5F
HEXSAVE  DS    3F
SAV4HEX  DC    F'0'
USERID   DC    CL8' '
         DC    C' '
MESSLINE DS    CL40
BSAVE    DS    A                   BASE SAVE AREA.
XECB     DC    A(0)                ECB
EMSG     DC    C'END OF MESSAGES FROM '
ENDID    DC    CL7' '
LEEMSG   EQU   *-EMSG
EMSG1    DC    C'.WARNING:  NO MESSAGES WERE SENT TO '
ENDID1   DC    CL7' '
LEMSG1   EQU   *-EMSG1
HIMSG    DC    C'FOLLOWING MESSAGES FROM '
HIID     DC    CL7' '
         DC    C'-'
LEHIMSG  EQU   *-HIMSG
NOTLMSG  EQU   *
NOTLID   DC    CL7' '
         DC    C' NOT LOGGED ON.'
LNOTLMSG EQU   *-NOTLMSG
BUFF     DS    CL80
TESTGA   DS    CL2
         SPACE 1
FLAG     DC    X'00'               OPTION FLAGS.
HMOD     EQU   B'10000000'         HALF DUPLEX MODE FLAG.
UNLOCK   EQU   B'01000000'         HALF DUPLEX, UNLOCKED.
FIRST    EQU   B'00100000'         FIRST MESSAGE FLAG.
STAXON   EQU   B'00010000'         STAX EXIT IN FORCE.
KILLSTAX EQU   B'00001000'         KILL STAX EXIT.
         SPACE 1
STAXLIST STAX  STAXEXIT,MF=L
         LTORG
         END   TELL
