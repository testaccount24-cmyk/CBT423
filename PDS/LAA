LAA      TITLE 'LAA - EXPANDED, DEFAULT-ONLY, ALLOCATION LISTER.'
*%A PPLINK NOTEST AMODGEN
         SPACE 1
***********************************************************************
*  Modified to find all the DSAB's even if they are above the 16M     *
*  line. "Next DSAB pointer" was changed from :                       *
*  TLUP     L     R5,DSABFCHN         POINT TO NEXT DSAB.  DSAB+x'4'  *
*                                        to:                          *
*  TLUP     L     R5,DSABFCHA         POINT TO NEXT DSAB.  DSAB+x'50' *
*  This change only made if DSABABOV in DSABFLG5 is on. Works always. *
***********************************************************************
*                                                                     *
*  COPYRIGHT (C) 2025 BY JEFFREY R. BROIDO.  ALL RIGHTS               *
*  RESERVED EXCEPT:                                                   *
*                                                                     *
*  PARTICULAR LICENSE IS GRANTED TO DISTRIBUTE THIS PROGRAM FREE      *
*  OF CHARGE, BUT IT MUST NOT BE SOLD.  A SERVICE CHARGE FOR          *
*  HANDLING A COLLECTION OF SOFTWARE OF WHICH THIS IS A PART,         *
*  ON THE OTHER HAND, IS APPROPRIATE.                                 *
*                                                                     *
*                                  BROIDO COMPUTER CONSULTING         *
*                                  broidoj@gmail.com                  *
*                                                                     *
***********************************************************************
         SPACE 1
***********************************************************************
*                                                                     *
*        LAA -  PROGRAM TO LIST ALLOCATION IN A FASHION SIMILAR TO    *
*               LISTALC COMMAND.  THIS COMMAND TAKES NO OPERANDS,     *
*               AND PRINTS THE DATASETS, WITH DDNAMES, IN A MORE      *
*               LINEWISE-COMPACT WAY THAN LISTALC.                    *
*                                                                     *
*                                  JEFFREY R. BROIDO - 20 FEB 78      *
*                                  COLGATE-PALMOLIVE, PISCATAWAY.     *
*                                                                     *
***********************************************************************
         SPACE 2
***********************************************************************
*                                                                     *
*        MODIFIED 1 FEB 79 AT J & J MIC TO TAKE A K OPERAND TO        *
*                 CLEAR THE SCREEN OF A DISPLAY TUBE BEFORE           *
*                 EXECUTION.                                          *
*                                                 JRB                 *
*                                                                     *
*        MODIFIED 8 JUL 92 AT PERSHING TO WORK PROPERLY WITH          *
*                 SWA ABOVE THE LINE.                                 *
*                                                 JRB                 *
*                                                                     *
*        MACRO IHAQDB IS NOW PART OF SYS1.MODGEN.  IT DOES NOT HAVE   *
*          TO BE INCLUDED IN THE SOURCE HERE AT THIS TIME.  SBG       *
*                                                                     *
***********************************************************************
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
*
*        %GOTO QDBL1;  /*
         SPACE 3
LAA      CSECT
LAA      AMODE 31
LAA      RMODE 24
         YREGS
         USING LAA,R15             (ESTABLISH TEMPORARY BASE).
         B     BEGIN               SKIP OVER HEADER.
HEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.
HEAD     DC    C' LAA - &SYSDATE - &SYSTIME -'
         DC    C'COPYRIGHT (C) BROIDO COMPUTER CONSULTING '
         DC    C'1978, 1992 - '
         DC    C'ALL RIGHTS RESERVED'
HEADL    EQU   *-HEAD
         DROP  R15                 (DROP TEMPORARY BASE).
BEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS
         LR    R12,R15             COPY BASE.
         USING LAA,R12             (TELL ASSEMBLER).
         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R13,8(,R14)         CHAIN ...
         ST    R14,SAVE+4          ... SAVE AREAS.
         SPACE 1
*              LOCATE THE DSAB QUEUE.
         SPACE 1
         LTR   R1,R1               ANY CPPL OR PARM POINTER?
         BZ    LAASTART            B IF NOT.
         L     R2,0(,R1)           POINT TO BUFFER
         LTR   R2,R2               ANY?
         BZ    LAASTART            B IF NOT.
         LH    R3,0(R2)            LOAD LENGTH.
         LTR   R3,R3               ANY?
         BZ    LAASTART            B IF NOT.
         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOKATION?
         BE    LAACP
         LA    R2,2(,R2)           POINT TO PARM.
         B     PARM
LAACP    CH    R3,=H'4'            ANY PARM?
         BE    LAASTART            B IF NOT.
         AH    R2,2(,R2)           POINT TO ...
         LA    R2,4(,R2)           ... PARM.
PARM     OI    0(R2),C' '          UPPERCASE.
         CLI   0(R2),C'K'          CLEAR?
         BNE   LAASTART            B IF NOT.
         GTSIZE
         LTR   R0,R0               DISPLAY?
         BZ    LAASTART            B IF NOT.
         K     ,                   CLEAR SCREEN.
LAASTART L     R5,X'10'            POINT TO THE CVT.
         L     R5,0(,R5)           POINT TO TCB WORDS.
         L     R5,0(,R5)           POINT TO MY TCB.
         USING TCB,R5              (TELL ASSEMBLER).
         L     R5,TCBJSCB          POINT TO MY JSCB.
         USING IEZJSCB,R5          (TELL ASSEMBLER).
         L     R5,JSCDSABQ         POINT TO MY QDB FOR DSAB QUEUE.
         USING QDB,R5              (TELL ASSEMBLER).
         L     R5,QDBFELMP         POINT TO FIRST DSAB.
         USING DSAB,R5             (TELL ASSEMBLER).
         MVI   OUT,X'40'           CLEAR ...
         MVC   OUT+1(OUTLEN-1),OUT ... OUTPUT AREA
         B     CKEND
TLUP     DS    0H
         TM    DSABFLG5,DSABABOV   IS THE DSAB ABOVE THE LINE?
         BO    DSABAB              YES. GO TO PROPER POINTER
         L     R5,DSABFCHN         POINT TO NEXT DSAB, OLD WAY.
         B     CKEND               DON'T DO THE OTHER ONE.
DSABAB   L     R5,DSABFCHA         POINT TO NEXT DSAB.
CKEND    LTR   R5,R5               END OF DSAB QUEUE?
         BNZ   CKDD                B IF NOT
         L     R13,SAVE+4             E
         LM    R14,R12,12(R13)          X
         SR    R15,R15                    I
         BR    R14                          T
CKDD     L     R2,DSABTIOT         POINT TO ASSOCIATED TIOT ENTRY.
         USING TIOENTRY,R2         (TELL ASSEMBLER).
         MVI   DISP,X'40'                CLEAR DISP, TFLAG ...
         MVC   DISP+1(OUTEND-DISP),DISP  ... AND DSN.
         MVC   DDN,TIOEDDNM        MOVE DDNAME
         MVC   DEV,=CL6'Term'      MOVE DEVICE NAME OF TERM.
         TM    TIOELINK,TIOTTERM   IS IT A TERMINAL?
         BO    OUTPUT              B IF YES.
         MVC   DEV,=CL6'Sysout'    MOVE DEV NAME OF SYSOUT.
         LA    R6,EPAL             POINT TO THE EPAL.
         USING ZB505,R6            (TELL ASSEMBLER)
         XC    EPAL,EPAL           CLEAR THE EPAL.
         MVC   SWVA,TIOEJFCB       MOVE TOKEN FOR JFCB TO EPAL.
         SWAREQ FCODE=RL,EPA=EPALPTR,UNAUTH=YES,                       +
               MF=(E,SWAPARMS)     GET ADDRESS OF JFCB.
         L     R4,SWBLKPTR         POINT TO JFCB.
         USING JFCB,R4             (TELL ASSEMBLER).
         TM    TIOELINK,TIOESYOT   IS IT A SUBSYSTEM DATASET?
         BZ    MVDSN               B IF NOT.
         MVC   DSN(6),=C'Class='   MOVE SYSOUT CLASS GRAPHIC.
         L     R15,X'14'(,R5)      POINT TO SIOT.
         XC    EPAL,EPAL           CLEAR THE EPAL.
         MVC   SWVA,DSABSSVA       MOVE TOKEN FOR SIOT TO EPAL.
         SWAREQ FCODE=RL,EPA=EPALPTR,UNAUTH=YES,                       +
               MF=(E,SWAPARMS)     GET ADDRESS OF SIOT.
         L     R15,SWBLKPTR        POINT TO SIOT.
         DROP  R15
         USING INDMSIOT,R15        (TELL ASSEMBLER).
         MVC   DSN+6(1),SCTOUTPN   MOVE SYSOUT CLASS FROM SIOT.
         DROP  R15
         B     OUTPUT              CONTINUE.
MVDSN    MVC   DSN,JFCBDSNM        MOVE DATASET NAME.
         CLC   =C'NULLFILE ',DSN   DUMMY DATASET?
         BNE   MVVOL               B IF NOT.
         MVC   DEV,=CL6'Dummy'     MOVE DUMMY GRAPHIC.
         B     CKTCAM              CONTINUE.
MVVOL    MVC   DEV,JFCBVOLS        MOVE VOLUME NAME.
CKTCAM   TM    TIOELINK,TIOTREM    TCAM?
         BZ    CKVIO               B IF NOT
         MVC   DSN(11),=C'TCAM Queue:'
         MVC   DEV,=CL6'Queue'     MOVE DEV NAME OF QUEUE (TCAM).
         MVC   DSN+12(8),JFCBDSNM  MOVE DATASET NAME AGAIN.
         B     OUTPUT              CONT.
CKVIO    TM    JFCFLGS1,JFCVRDS    VIO DATASET?
         BZ    GETUNIT             B IF NOT.
         MVC   DEV,=CL6'Vio'       MOVE VIO GRAPHIC.
         B     CKVTOC              CONT.
GETUNIT  CLC   DEV,=CL6' '         HAS DEVICE FIELD BEEN FILLED?
         BNE   CKVTOC              B IF YES.
         SR    R1,R1               LOAD ...
         ICM   R1,7,TIOEFSRT       ... POINTER TO UCB.
         USING UCBCMEXT,R1         (TELL ASSEMBLER)
         MVC   DEV,=CL6'(###)'     MOVE DEVICE GRAPHIC.
         MVC   DEV+1(3),UCBNAME    MOVE DEVICE ADDRESS.
         DROP  R1,R2
CKVTOC   CLI   DSN,X'04'           IS THIS THE DSN FOR VTOC?
         BNE   CKDISP              B IF NOT.
         MVC   DSN,=CL44'           -- Volume Table of Contents --'
CKDISP   MVC   DISP,=C'SHR'        MOVE SHR GRAPHIC.
         TM    JFCBIND2,JFCSHARE   SHARED?
         BO    CKTEMP              B IF YES
         MVC   DISP,=C'NEW'        MOVE NEW GRAPHIC.
         TM    JFCBIND2,JFCNEW     TEST OLD-NEW BITS.
         BO    CKTEMP              B IF NEW.
         MVC   DISP,=C'OLD'        MOVE OLD GRAPHIC.
         TM    JFCBIND2,JFCOLD     OLD?
         BO    CKTEMP              B IF YES.
         MVC   DISP,=C'MOD'        MOVE MOD GRAPHICS.
CKTEMP   TM    DSABFLG1,DSABPALC   PERMANENT ALLOCATION?
         BO    NOTTEMP             B IF YES.
         MVI   TFLAG,C'*'          MOVE TEMP. ALLOCATION FLAG.
NOTTEMP  CLI   JFCBELNM,C' '       MEMBER OR GENERATION?
         BE    OUTPUT              B IF NOT.
MEM      LA    R1,8                LD MAX MEMBER LEN FOR BCT.
         LA    R2,JFCBELNM         PT TO MEMBER.
MEMLUP   CLI   0(R2),C' '          CHAR BLANK?
         BE    MEMLCALC            B IF YES.
         LA    R2,1(,R2)           BUMP POINTER.
         BCT   R1,MEMLUP
MEMLCALC LA    R3,8                CALC ...
         SR    R3,R1               ... MEMBER LENGTH.
         LA    R1,76-(OUT-DSN)     GENERATE ...
         SR    R1,R3               ... DSN SCAN INDEX.
         LA    R2,DSN              POINT TO DSN.
DFBLUP   CLI   0(R2),C' '          CHAR BLANK?
         BE    DFBSET              B IF YES.
         LA    R2,1(,R2)           BUMP POINTER.
         BCT   R1,DFBLUP           LOOK AT ANOTHER CHAR.
         B     OUTPUT              NO ROOM FOR MEMBER.  SKIP IT.
DFBSET   MVI   0(R2),C'('          MOVE PAREN.
         EX    R3,MVMEMB           MOVE MEMBER (+ ONE CHAR).
*      ( MVC   1(*-*,R2),JFCBELNM  )
         LA    R2,0(R2,R3)         BUMP PTR.
         MVI   1(R2),C')'          MOVE PAREN.
OUTPUT   APUT  OUT,OUTLEN          OUTPUT LINE
         B     TLUP                LOOP.
SAVE     DS    9D
MVMEMB   MVC   1(*-*,R2),JFCBELNM  *** EXECUTED ***
OUT      EQU   *
DDN      DS    CL8,3X
DEV      DS    CL6,3X
DISP     DS    CL3,2X
TFLAG    DS    C
DSN      DS    CL44
OUTEND   EQU   *
OUTLEN   EQU   *-OUT
         SPACE 1
POOP     DC    X'00'               BUFFER.
EPALPTR  DC    A(EPAL)             POINTER TO EPAL.
EPAL     DS    CL28                EPAL.
SWAPARMS SWAREQ MF=L               SWAREQ PARMS
         TITLE '- MAPPING MACROS.'
         IEFZB505 LOCEPAX=YES      MAP THE EPAL.
         CVT   DSECT=YES           MAP THE CVT.
         IEFJESCT                  MAP THE JESCT.
         IEZJSCB                   MAP THE JSCB.
         IKJTCB                    MAP THE TCB.
         IHAQDB                    MAP THE QDB.
         IHADSAB                   MAP THE DSAB.
         IEFTIOT1                  MAP THE TIOT.
JFCB     DSECT
         IEFJFCBN                  MAP THE JFCB.
         IEFASIOT                  MAP THE SIOT.
         IEFUCBOB                  MAP THE UCB.
         END   LAA
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*  CLEANED A BIT  . . . 08/17
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUMENTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
R3       EQU   3                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
         DS    0D
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   R14,R12,12(R13)    SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    R1,8(,R13)         OUR SAVE AREA POINTER
         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA
         LR    R13,R1             @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(,R13)        POINT TO CALLER'S RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 RC IF BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 RC IF BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(,RML)              MESSAGE LENGTH
         STH   R15,PUTLEN               PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA
         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    R2,R13                   @OUR SAVE AREA
         LR    R3,R15                   SAVE RETURN CODE
         L     R13,4(,R13)              @CALLER'S SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,R3                   RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
