MAPXA    TITLE 'MAPXA - TSO COMMAND TO PROVIDE MVS/XA STORAGE LAYOUT MA+
               P.'
*%A AMODGEN PPLINK ADATA NOTEST
*L ALIAS MAPSP
         MACRO
&NAME    ON    &FLAG
.*
         LCLC  &L
&L       SETC  'L'''
&NAME    OI    &FLAG,&L.&FLAG              (TURN ON BIT FLAG)
         MEND
         MACRO
&NAME    OFF   &FLAG
.*
         LCLC  &L
&L       SETC  'L'''
&NAME    NI    &FLAG,255-&L.&FLAG          (TURN OFF BIT FLAG)
         MEND
* ------------------------------------------------------------------- *
         MACRO
&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &
               &LEN,                    @LENGTH OF MESSAGE             &
               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &
               &EPA=                    EPUTL EPA
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*  --> E@PUT
.*
.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.
.*
.*
.*  ARGUMENTS: -----------------------------------------------------
.*
.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL
.*
.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)
.*
.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT
.*            COMPATIBILITY.
.*
.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE
.*
.*
.*   EXAMPLES: -----------------------------------------------------
.*
.*      1) APUT  'LITERAL'
.*
.*      2) APUT  (R3),80
.*
.*      3) APUT  LABEL
.*
.*      4) APUT  LABEL,40
.*
.*
.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
.*
.*
.*  LOCAL SET SYMBOLS
.*
         LCLC  &SMA                     MESSAGE ADDRESS (REG)
         LCLC  &SML                     MESSAGE LENGTH (REG)
         LCLC  &SEP                     EPA (REGISTER)
.*
         LCLC  &L1,&L2,&L3              LOCAL LABELS
.*
&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS
&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS
&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS
.*
.*
.*  MESSAGE ADDRESS
.*
         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*
.*                                                          *HMD 11/86*
&LABEL   DS    0H                                           *HMD 11/86*
.*                                                          *HMD 11/86*
.A0500   ANOP                                               *HMD 11/86*
         AIF   ('&MSG' NE '').A2000
         MNOTE 8,'''&MSG='' MISSING / REQUIRED'
         MEXIT
.*
.A2000   ANOP
         AIF   ('&MSG'(1,1) NE '(').A2400
&SMA     SETC  '&MSG'(2,K'&MSG-2)
         LR    R1,&SMA                  @MESSAGE TEXT
         AGO   .A2600
.*
.A2400   ANOP
         AIF   ('&MSG'(1,1) NE '''').A2500
         B     &L3                      BRANCH AROUND MESSAGE
&L2      DC    C&MSG
&L3      DS    0H
         LA    R1,&L2                   @MESSAGE
         AGO   .A2600
.*
.A2500   ANOP
         LA    R1,&MSG                  @MESSAGE TEXT
.A2600   ANOP
.*
.*  MESSAGE LENGTH
.*
         AIF   ('&LEN' NE '').A3000
         AIF   ('&MSG'(1,1) NE '''').A2800
         LA    R0,L'&L2                 MESSAGE LENGTH
         AGO   .A3600
.*
.A2800   ANOP
         AIF   ('&MSG'(1,1) EQ '(').A2900
         LA    R0,L'&MSG                MESSAGE LENGTH
         AGO   .A3600
.*
.A2900   ANOP
         MNOTE 8,'''LEN'' MISSING / REQUIRED'
         MEXIT
.*
.A3000   ANOP
         AIF   ('&LEN'(1,1) NE '(').A3400
&SML     SETC  '&LEN'(2,K'&LEN-2)
         LR    R0,&SML                  MESSAGE LENGTH
         AGO   .A3600
.*
.A3400   ANOP
         LA    R0,&LEN                  MESSAGE LENGTH
.A3600   ANOP
.*
.*  RSA
.*
         AIF   ('&RSA' EQ '').A4900
         ST    R14,&RSA                 SAVE REGS 14
.A4900   ANOP
.*
.*  ENTRY POINT
.*
         AIF   ('&EPA' NE '').A5000
         L     R15,=V(EPUTL)            EPA
         AGO   .A5600
.*
.A5000   AIF   ('&EPA'(1,1) NE '(').A5400
&SEP     SETC  '&EPA'(2,K'&EPA-2)
         LR    R15,&SEP                 EPA
         AGO   .A5600
.*
.A5400   ANOP
         L     R15,&EPA                 EPA
.*
.A5600   ANOP
.*
.*  CALL LINKAGE
.*
.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE
.*
         AIF   ('&RSA' EQ '').A6900
         L     R14,&RSA                 RESTORE R14
.A6900   ANOP
.*
.AMEND   MEND
* ------------------------------------------------------------------- *
         SPACE 1
***********************************************************************
*                                                                     *
*        MAPXA - TSO COMMAND TO PRODUCE STORAGE BOUNDARY MAP FOR      *
*                MVS/XA, ESA, OS/390.                                 *
*                                                                     *
*                SYSLIB: ASM: SYS1.MODGEN.                            *
*                        LNK: NONE.                                   *
*                                                                     *
*                NOT REENTRANT.                                       *
*                TESTED THROUGH LEVEL Z/OS 2.1   (SBG)                *
*                                                                     *
*                                  JEFFREY R. BROIDO                  *
*                                  MHT/WCF-4/NYP-NYC                  *
*                                  26  JANUARY  1984                  *
*                                                                     *
***********************************************************************
         SPACE 1
MAPXA    CSECT
MAPXA    RMODE 24                  RESIDE BELOW THE LINE.
MAPXA    AMODE 31                  USE 31 BIT ADDRESSING.
         YREGS
         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS.
         LR    R12,R15             COPY BASE.
         USING MAPXA,R12           TELL ASSEMBLER.
         LR    R14,R13             PRESERVE CALLER'S SA PTR.
         LA    R13,SAVE            POINT TO MY SAVE AREA.
         ST    R14,SAVE+4          CHAIN ...
         ST    R13,8(,R13)         ... SAVE AREAS.
         SPACE 1
         L     R9,X'10'            POINT TO CVT.
         USING CVT,R9              TELL ASSEMBLER.
         L     R8,CVTGDA           POINT TO GDA.
         USING GDA,R8              TELL ASSEMBLER.
         L     R7,CVTSMEXT         POINT TO CVT EXTENSION.
         USING CVTVSTGX,R7         TELL ASSEMBLER.
         GTSIZE ,                  GET SCREEN SIZE, IF ANY.
         LTR   R0,R0               IS THIS A PAPER TERMINAL (NO DEPTH)?
         BZ    HEADOUT             B IF YES.
         STFSMODE ON,INITIAL=YES
*        TPUT  CLEAR,L'CLEAR,FULLSCR CLEAR THE DISPLAY SCREEN.
*        TPUT  CLEAR,L'CLEAR,NOEDIT  CLEAR THE DISPLAY SCREEN.
         STFSMODE OFF
         ON    GFLG                TURN ON 3X7X FLAG.
HEADOUT  APUT  HEAD1,LEN           OUTPUT HEADINGS.
         APUT  HEAD2,LEN           OUTPUT UNDERLINES.
         LA    R3,TABLE            POINT TO TABLE ENTRY.
         USING TABLED,R3           TELL ASSEMBLER.
TABLUP   CLI   0(R3),X'00'         END OF TABLE?
         BE    EXIT                B IF YES.
         MVC   AREA,TABTITLE       MOVE ENTRY TITLE.
         L     R15,TABRES          POINT TO DATA RESOLUTION ROUTINE.
         BALR  R14,R15             FILL-IN TABLE ENTRY.
         LA    R1,TABSTART         POINT TO AREA START ADDRESS.
         TM    0(R1),X'80'         BUT IS AREA MISSING?
         BO    MISSING             B IF AREA IS INDEED MISSING.
         BAL   R14,HEXOUT          CONVERT TO CHARACTER HEX.
         MVC   START,WORK          MOVE START ADDR. CHARACTER HEX.
         LA    R1,TABEND           POINT TO AREA END ADDRESS.
         BAL   R14,HEXOUT          CONVERT TO CHARACTER HEX.
         MVC   END,WORK            MOVE END ADDR. CHAR. HEX.
         L     R1,TABLEN           LOAD AREA LENGTH FROM TABLE.
         SRL   R1,10               "DIVIDE" BY 1K.
         CVD   R1,WORK             DECIMALIZE IT.
         MVC   LENGTH,=X'40206B2020206B202120'  MOVE EDIT PATTERN.
         ED    LENGTH,WORK+4       EDIT LENGTH.
         ICM   R1,15,TABFULL       LOAD AREA BYTES USED.
         BNZ   TFE                 B IF NOT ZERO.
         MVC   FULL,=C'--'         MOVE "NOT APPLICABLE" GRAPHIC.
         B     DETPUT              CONTINUE.
MISSING  MVC   START,=C'      --'  MOVE "MISSING" GRAPHIC.
         MVC   END,=C'      --'    MOVE "MISSING" GRAPHIC.
         MVC   LENGTH,=C'        --'  MOVE "MISSING" GRAPHIC.
         MVC   FULL,=C'--'         MOVE "MISSING" GRAPHIC.
         B     DETPUT              CONTINUE.
TFE      L     R5,TABLEN           LOAD DIVISOR.
         MH    R1,=H'100'          MULTIPLY BYTES BY 100.
         SR    R0,R0               ZERO HIGH ORDER DIVIDEND.
         DR    R0,R5               GENERATE PERCENT USED.
         SRL   R5,1                "DIVIDE" DIVISOR BY 2.
         CR    R0,R5               SHALL I ROUND?
         BL    NOROUND             B IF NOT.
         LA    R1,1(,R1)           ROUND PERCENTAGE.
NOROUND  CVD   R1,WORK             DECIMALIZE PERCENT.
         UNPK  WORK1(3),WORK+6(2)  UNPAKC PERCENT.
         MVC   FULL,WORK1+1        MOVE PERCENT.
         OI    FULL+1,C'0'         FIX SIGN.
DETPUT   APUT  DETAIL,LEN          OUTPUT DETAIL LINE.
         LA    R3,TLEN(,R3)        BUMP TO NEXT TABLE ENTRY.
         B     TABLUP              LOOP.
         SPACE 1
EXIT     L     R13,SAVE+4          POINT TO CALLER'S SAVE AREA.
         LM    R14,R12,12(R13)     RELOAD CALLER'S REGISTERS.
         SR    R15,R15             SET CC OF 0
         BR    R14                 RETURN TO CALLER.
         TITLE 'DATA RESOLUTION ROUTINES.'
NOPRES   BR    R14                 NOOP RESOLUTION ROUTINE.
PRES     L     R1,GDAPVTSZ         LOAD PRIVATE SIZE.
         BCTR  R1,*-*              GENERATE TRUE END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         S     R1,TABSTART         GENERATE ...
         LA    R1,1(,R1)           ... TRUE LENGTH.
         ST    R1,TABLEN           SAVE IN TABLE.
         BR    R14                 RETURN.
EPRES    L     R1,GDAEPVT          LOAD START OF E-PRIVATE.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDAEPVTS         LOAD LENGTH OF E-PRIVATE
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... E-PRIVATE END ADDRESS.
         ST    R1,TABEND           SAVE END ADDRESS IN TABLE.
         BR    R14                 RETURN.
CRES     L     R1,GDACSA           LOAD START OF CSA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDACSASZ         LOAD LENGTH OF CSA.
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... CSA END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         S     R2,GDACSARE         GENERATE BYTES USED.
         ST    R2,TABFULL          SAVE IN TABLE.
         BR    R14                 RETURN.
ECRES    L     R1,GDAECSA          LOAD START OF E-CSA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDAECSAS         LOAD LENGTH OF E-CSA.
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... E-CSA END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         BR    R14                 RETURN.
SRES     L     R1,GDASQA           LOAD START OF SQA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDASQASZ         LOAD LENGTH OF SQA.
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... SQA END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         BR    R14                 RETURN.
ESRES    L     R1,GDAESQA          LOAD START OF E-SQA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDAESQAS         LOAD LENGTH OF E-SQA.
         ST    R2,TABLEN           SAVE IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... E-SQA END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         BR    R14                 RETURN.
NRORES   DS    0H
         STM   R14,R1,SAVEAP       APUT USES R14 AND R15.
         APUT  LINE,LINEL          HERE I DRAW THE LINE.
         LM    R14,R1,SAVEAP       RESTORE R14, R15 ETC.
         L     R1,CVTRONS          LOAD START OF NUC R/O AREA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,TABEND           LOAD X'00FFFFFF'.
         SR    R2,R1               GENERATE ...
         LA    R2,1(,R2)           ... LENGTH.
         ST    R2,TABLEN           SAVE IT IN TABLE.
         BR    R14                 RETURN.
ENRORES  L     R1,TABSTART         LOAD X'01000000'.
         L     R2,CVTRONE          LOAD END OF NUC R/O AREA.
         O     R2,=A(X'00000FFF')  FORCE ALIGNMENT TO END OF PAGE.
         ST    R2,TABEND           SAVE IN TABLE.
         SR    R2,R1               GENERATE ...
         LA    R2,1(,R2)           ... LENGTH.
         ST    R2,TABLEN           SAVE IN TABLE.
         BR    R14                 RETURN.
VRRES    L     R1,GDAVR            LOAD START OF V=R AREA.
         ST    R1,TABSTART         SAVE IN TABLE.
         L     R2,GDAVRSZ          LOAD LENGTH OF V=R AREA.
         ST    R2,TABLEN           SAVE LENGTH IN TABLE.
         AR    R1,R2               GENERATE ...
         BCTR  R1,*-*              ... V=R END ADDRESS.
         ST    R1,TABEND           SAVE IN TABLE.
         BR    R14                 RETURN.
         SPACE 1
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A GENERAL DATA RESOLUTION ROUTINE FOR           *
*        STARTING-ENDING ADDRESS PAIRS IN THE VCT VS ADDRESS          *
*        EXTENSION.  THE TABLE CONTAINS THE ABSOLUTE DISPLACEMENT     *
*        IN THE CVT EXTENSION TO THE STARTING ADDRESS RATHER THAN     *
*        THE STARTING ADDRESS ITSELF; THE ENDING ADDRESS IS           *
*        PRESUMED TO FOLLOW IN THE CVT EXTENSION.                     *
*                                                                     *
***********************************************************************
         SPACE 1
CXRES    LR    R1,R7               POINT TO THE CVT EXTENSION.
         A     R1,TABSTART         POINT TO THE STARTING ADDRESS.
         ICM   R2,15,4(R1)         LOAD ENDING ADDRESS.
         BNP   CXNA                B IF THIS AREA IS MISSING.
         L     R1,0(,R1)           LOAD STARTING ADDRESS.
         ST    R1,TABSTART         SAVE IT IN TABLE.
         O     R2,=A(X'00000FFF')  FORCE END OF PAGE ALIGNMENT TO ...
*                                  ... ACCOUNT FOR WASTE AT CHANGE ...
*                                  ... OF PROTECTION BOUNDARIES.
         ST    R2,TABEND           SAVE ENDING ADDRESS IN TABLE.
         SR    R2,R1               GENERATE ...
         LA    R2,1(,R2)           LENGTH.
         ST    R2,TABLEN           SAVE IN TABLE.
         BR    R14                 RETURN.
CXNA     LNR   R1,R1               MAKE R1 NEGATIVE.
         ST    R1,TABSTART         SAVE IN TABLE START POSITION.
         BR    R14                 RETURN.
         TITLE 'SUBROUTINE(S).'
***********************************************************************
*                                                                     *
*    HEXOUT - SUBROUTINE TO GENERATE CHARACTER CODED HEXADECIMAL      *
*        FOR OUTPUT.  R1 POINTS TO THE FULLWORD TO BE TRANSLATED.     *
*        FIND OUTPUT CHARACTER RESULT IN DOUBLEWORD "WORK."           *
*                                                                     *
***********************************************************************
         SPACE 1
HEXOUT   MVO   WORK1,0(4,R1)       GENERATE PSEUDO PACKED VALUE.
         UNPK  WORK,WORK1+3(5)     SEPARATE NIBBLES.
         NC    WORK,=X'0F0F0F0F0F0F0F0F' ELIMINATE ZONES.
         TR    WORK,=C'0123456789ABCDEF' TRANSLATE TO PRINTABLE HEX.
         BR    R14                 RETURN TO CALLER.
         TITLE 'DATA AREAS.'
SAVE     DS    9D                  SAVE AREA.
WORK     DS    D                   WORK DOUBLEWORD.
WORK1    DS    D                   WORK DOUBLEWORD.
         SPACE 1
FLAG     DC    X'00'               VARIOUS FLAG(S).
GFLG     EQU   FLAG,B'10000000'    USER AT DISPLAY TERMINAL.
         SPACE 1
*CLEAR   DC    X'F31140403C40400013' CLEAR 3X7X TERMINAL.
CLEAR    DC    X'F5F313'           CLEAR 3X7X TERMINAL.
         SPACE 1
HEAD1    DC    C'Area          '
HEAD1A   DC    C'Start      '
HEAD1B   DC    C'End        '
HEAD1C   DC    C'Length (K)  '
HEAD1D   DC    C'%Full'
LEN      EQU   *-HEAD1
HEAD2    DC    CL(LEN)' '
         ORG   HEAD2
HEAD2A   DC    C'------------'
         ORG   HEAD2+(HEAD1A-HEAD1)
HEAD2B   DC    C'--------'
         ORG   HEAD2+(HEAD1B-HEAD1)
HEAD2C   DC    C'--------'
         ORG   HEAD2+(HEAD1C-HEAD1)
HEAD2D   DC    C'----------'
         ORG   HEAD2+(HEAD1D-HEAD1)
HEAD2E   DC    C'-------'
         ORG
DETAIL   DC    CL(LEN)' '
         ORG   DETAIL
AREA     EQU   *,12
         ORG   DETAIL+(HEAD1A-HEAD1)
START    EQU   *,8
         ORG   DETAIL+(HEAD1B-HEAD1)
END      EQU   *,8
         ORG   DETAIL+(HEAD1C-HEAD1)
LENGTH   EQU   *,10
         ORG   DETAIL+(HEAD1D-HEAD1)
FULL     EQU   *,2
         ORG
*LINE     DC    (LEN)C'-',C'   The Line.'
LINE     DC    C'-----------------------------------------------------',
               ,C'   The Line.'
LINEL    EQU   *-LINE
SAVEAP   DS    4F
         SPACE 1
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A TABLE OF STORAGE AREAS TO MAP.  THE FIRST     *
*        12 BYTES OF EACH ENTRY IS THE AREA TITLE, THE NEXT WORD      *
*        IS THE AREA START ADDRESS, THE NEXT WORD IS THE LENGTH,      *
*        THE NEXT WORD IS THE END ADDRESS, THE NEXT WORD IS THE       *
*        NUMBER OF BYTES USED OR 0 AND THE LAST WORD IS THE DATA      *
*        RESOLUTION ROUTINE ADDRESS.  IN THE CASE OF RESOLUTION       *
*        ROUTINE CXRES, THE START ADDRESS IS REPLACED BY THE          *
*        ABSOLUTE DISPLACEMENT TO THE START ADDRESS IN THE CVT VS     *
*        EXTENSION.                                                   *
*                                                                     *
***********************************************************************
         SPACE 1
TABLE    DS    0A                  START OF TABLE OF AREAS.
         DC    CL12'E-Private',A(0),A(0),A(0),A(0),A(EPRES)
         DC    CL12'E-CSA',A(0),A(0),A(0),A(0),A(ECRES)
         DC    CL12'E-MLPA'
         DC    A(CVTEMLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'E-FLPA'
         DC    A(CVTEFLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'E-PLPA'
         DC    A(CVTEPLPS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'E-SQA',A(0),A(0),A(0),A(0),A(ESRES)
         DC    CL12'E-Nuc. (RW)'
         DC    A(CVTERWNS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'E-Nuc. (RO)'
         DC    X'01000000',A(0),A(0),A(0),A(ENRORES)
         DC    CL12'Nucleus (RO)'
         DC    A(0),A(0),X'00FFFFFF',A(0),A(NRORES)
         DC    CL12'Nucleus (RW)'
         DC    A(CVTRWNS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'SQA',A(0),A(0),A(0),A(0),A(SRES)
         DC    CL12'PLPA',A(CVTPLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'FLPA',A(CVTFLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'MLPA',A(CVTMLPAS-CVTVSTGX),A(0),A(0),A(0),A(CXRES)
         DC    CL12'CSA',A(0),A(0),A(0),A(0),A(CRES)
         DC    CL12'Private',A(4096),A(0),A(0),A(0),A(PRES)
         DC    CL12'V=R (if any)',A(0),A(0),A(0),A(0),A(VRRES)
         DC    CL12'PSA',A(0),A(4096),A(4095),A(0),A(NOPRES)
         DC    X'00'               END OF TABLE.
         TITLE 'MAPXA - DSECTS.'
         CVT   DSECT=YES
         IHAGDA
TABLED   DSECT                     TABLE ENTRY MAPPING DSECT.
TABTITLE DS    CL12                TABLE ENTRY TITLE.
TABSTART DS    A                   START ADDRESS OF ENTRY'S AREA.
TABLEN   DS    A                   LENGTH OF ENTRY'S AREA.
TABEND   DS    A                   END ADDRESS OF ENTRY'S AREA.
TABFULL  DS    A                   NUMBER OF BYTES USED.
TABRES   DS    A                   ADDRESS OF RESOLUTION ROUTINE.
TLEN     EQU   *-TABLED            LENGTH OF TABLE ENTRY.
         END   MAPXA
EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&
               OR'
EPUTL    CSECT                                              *HMD 10/85*
         LCLB  &XA                                          *HMD 10/85*
&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*  MODULE NAME  . . . . EPUTL
*
*  ALIASES  . . . . . . NONE
*
*  DATE WRITTEN . . . . 06/85
*  UPDATED      . . . . 04/88                                  HD APR88
*
*  AUTHOR . . . . . . . JIM ELSWORTH
*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88
*
*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR
*
*  PURPOSE:
*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE
*
*
*  DESCRIPTION:
*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.
*    ISSUES SINGLE LINE PUTLINE.
*
*
*  ATTRIBUTES:
*    REENTRANT
*
*  FEATURES:
*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.
*
*  CALLED MODULES:
*    PUTLINE
*
*  ASSUMPTIONS:
*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE
*
*  ABENDS:
*    POSSIBLE 0CX IF BAD ARGUEMNTS
*
*  CAVEATS:
*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB
*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.
*
*
*  INPUT ARGUMENTS:
*    1)  R1 : ADDRESS OF MESSAGE TEXT
*    2)  R0 : LENGTH OF MESSAGE TEXT
*    3) R13 : STANDARD OS SAVE AREA
*    4) R14 : RETURN ADDRESS
*    5) R15 : ENTRY ADDRESS
*
*               ( CONTINUED ... )
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*
*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR
*
RCBA     EQU   100                 BAD MESSAGE ADDRESS
RCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG
*
MAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH
*
*
*  REGISTERS USED:
*
R0       EQU   0                   MESSAGE LENGTH AT ENTRY
R1       EQU   1                   MESSAGE ADDRESS AT ENTRY
R2       EQU   2                   WORK
RMA      EQU   4                   @MESSAGE TEXT
RML      EQU   5                   MESSAGE LENGTH
RUPT     EQU   6                   @UPT (USER PROFILE TABLE)
RECT     EQU   7                   @ECT
R12      EQU   12                  CSECT BASE
R13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA
R14      EQU   14                  WORK/LINKAGE
R15      EQU   15                  WORK/LINKAGE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
         IKJCPPL
         EJECT
         IKJTCB   LIST=YES                                  *HMD 10/85*
         EJECT                                              *HMD 10/85*
         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*
         EJECT
         IHAPSA   LIST=YES                                     HD APR88
         EJECT                                                 HD APR88
PUTLDS   DSECT
         DS    18F                      OS SAVE AREA
PUTAAA   EQU   *
PUTECB   DS    F                        ECB
PUTIOPL  DS    4F                       IOPLADS
PUTBLOK  PUTLINE MF=L
PUTLEN   DS    H                        LENGTH
PUTZZZ   DS    H                        RESERVED
PUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA
PUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS
         EJECT
***********************************************************************
*  SET UP LINKAGE
***********************************************************************
         SPACE 1
EPUTL    CSECT
         AIF  (NOT &XA).X001                                *HMD 10/85*
EPUTL    AMODE 31
.X001    ANOP                                               *HMD 10/85*
         STM   14,12,12(13)       SAVE CALLERS REGS
         LR    R12,R15            COPY EPA
         USING EPUTL,R12          ADDRESSABILITY
         AIF   (NOT &XA).X002                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &
               LOC=RES            RELATIVE TO 16MB LINE
         AGO   .X003                                        *HMD 10/85*
.X002    ANOP                                               *HMD 10/85*
         GETMAIN RU,              LV=LENGTH                            &
               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA
.X003    ANOP                                               *HMD 10/85*
         ST    1,8(13)            OUR SAVE AREA POINTER
         ST    13,4(1)            POINTER TO CALLERS SAVE AREA
         LR    13,1               @OUR SAVE AREA
         USING PUTLDS,R13         MAP SA AND WORK AREA
         L     R14,4(R13)         POINT TO CALLERS RSA
         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN
         SPACE 2
***********************************************************************
*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE
***********************************************************************
         SPACE 1
         LA    R15,RCBA                 ASSUME BAD ADDRESS
         LTR   RMA,R1                   MESSAGE ADDRESS
         BNP   RETURN                   GOOD ASSUMPTION
         LA    R15,RCBL                 ASSUME BAD LENGTH
         LTR   RML,R0                   POSITIVE?
         BNP   RETURN                   -NO
         C     RML,=A(MAXMSG)           MORE THAN MAX?
         BH    RETURN                   -YES
         SPACE 2
***********************************************************************
*  BUILD PARAMETER LIST
***********************************************************************
         SPACE 1
         LA    R15,4(RML)               MESSAGE LENGTH
         STH   R15,PUTLEN                 PLUS HEADER
         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW
         BCTR  RML,0                    REDUCE FOR MOVE
         EX    RML,PUTMOVE
         EJECT
***********************************************************************
*  DIG UP ADDRESS OF UPT AND ECT
***********************************************************************
         SPACE 1
         L     R2,PSATOLD-PSA           @TCB                   HD APR88
         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA
         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP
         USING CPPL,R2                  MAP CPPL
         L     RUPT,CPPLUPT             @UPT
         L     RECT,CPPLECT             @ECT
         SPACE 2
***********************************************************************
*  ISSUE PUTLINE CALL
***********************************************************************
         SPACE 1
         XC    PUTECB,PUTECB            CLEAR ECB
         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88
         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &
               UPT=(RUPT),              @UPT                           &
               ECT=(RECT),              @ECT                           &
               ECB=PUTECB,              @ECB                           &
               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &
               MF=(E,PUTIOPL)
         EJECT
***********************************************************************
*  RETURN TO CALLER
***********************************************************************
         SPACE 1
RETURN   EQU   *
         LR    2,R13                    @OUR SAVE AREA
         LR    3,R15                    SAVE RETURN CODE
         L     R13,4(R13)               @CALLERS SAVE AREA
         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0
         LR    R15,3                    RESTORE RC
         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS
         SPACE 5
***********************************************************************
*  CONSTANTS AND NON-REENTRANT WORK AREAS
***********************************************************************
         SPACE 1
PUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER
         SPACE 2
         LTORG
         SPACE 2
         END   EPUTL
